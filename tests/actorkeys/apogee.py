#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# @Author: José Sánchez-Gallego (gallegoj@uw.edu)
# @Date: 2019-12-28
# @Filename: apogee.py
# @License: BSD 3-clause (http://www.opensource.org/licenses/BSD-3-Clause)

# type: ignore


KeysDictionary(
    'apogee', (1, 2),

    Key('text',
        String(),
        help='text for humans'),
    Key('version',
        String(),
        help='version string derived from svn info.'),
    Key('dayNumber',
        Int(),
        help='APOGEE day number = SDSS MJD - 55526'),

    # Camera
    Key('arrayPower',
        Bool('off', 'on', invalid='?'),
        help='Commanded array power.'),
    Key('cameraState',
        Enum('Exposing',
             'Done',
             'Stopping',
             'Stopped',
             'Failed',
             name='expState',
             help='state of exposure'),
        help='A simplified version of exposureState that is output by the status command'),
    Key('dspFiles',
        String() * (1, 10),
        help='List of available DSP files'),
    Key('dspload',
        String(),
        help='Name of DSP file currently in use'),
    Key('exposureTypeList',
        String() * (4, 15),
        help="Allowed exposure types -- values for the 'object' argument to the expose command"),
    Key('exposureState',
        Enum('Exposing',
             'Done',
             'Stopping',
             'Stopped',
             'Failed',
             name='expState',
             help='state of exposure'),
        String(name='expType', help='type of exposure (object argument)'),
        Int(name='nReads', help='total number of UTR reads requested'),
        String(name='expName', help='name of exposure')),
    Key('exposureWroteFile',
        String(name='wrotefile'),
        help='Name of FITS file just written to disk',
        doCache=False),
    Key('exposureWroteSummary',
        String(name='wrotesummary'),
        help='Name of CDS FITS file just written to disk',
        doCache=False),
    Key('utrReadState',
        String(name='expName', help='name of exposure'),
        Enum('Reading', 'Saving', 'Done', 'Failed',
             name='readState',
             help='state of UTR read'),
        Int(name='readNum', help='number of current UTR read, starting from 1'),
        Int(name='nReads', help='total number of UTR reads requested')),
    Key('utrReadTime',
        Float(units='sec', invalid='NaN'),
        help='time required for a UTR read'),

    # Collimator
    Key('collOrient',
        Float(name='piston', units='microns', invalid='NaN',
              help='+ brings collimator towards the instrument'),
        Float(name='pitch', units='pixels', invalid='NaN', help='+ tips the beam down'),
        Float(name='yaw', units='pixels', invalid='NaN',
              help='+ tips the beam to the right as seen by the collimator'),
        help='Collimator orientation'),
    Key('collMountPosition',
        Float(units='microns', invalid='NaN') * 3,
        help='Current collimator actuator position'),
    Key('collMountLimits',
        Float(units='microns', invalid='NaN') * 2,
        help='Reverse, forward software limits for collimator actuator position'),
    Key('collLimitSwitch',
        Bool('false', 'true', invalid='?') * 6,
        help='Home 1, forward 1, home 2, forward 2, home 3, forward 3 limit switch activated?'),
    Key('collIndexer',
        Bool('Off', 'On'),
        help='Is the collimator controller available (on and communicating)?'),

    # Dither
    Key('ditherPosition',
        Float(name='pixels', units='pixels', invalid='NaN'),
        Enum('A', 'B', '?',
             name='name',
             help='name of current position; ? if not a named position'),
        help='Current dither position'),
    Key('ditherNamedPositions',
        Float(units='pixels', invalid='NaN') * 2,
        help='Pixel positions of A, B named positions'),
    Key('ditherLimits',
        Float(units='pixels', invalid='NaN') * 2,
        help='Reverse, forward software limits for dither position'),
    Key('ditherLimitSwitch',
        Bool('false', 'true', invalid='?') * 2,
        help='Home, forward dither limit switch activated?'),
    Key('ditherIndexer',
        Bool('Off', 'On'),
        help='Is the dither controller available (on and communicating)?'),

    # Shutter
    Key('shutterPosition',
        Int(units='steps', invalid='NaN'),
        help='Current shutter position'),
    Key('shutterLimitSwitch',
        Bool('false', 'true') * 2,
        help='Open, closed shutter limit switch activated?'),
    Key('shutterLED',
        Int(invalid='NaN'),
        help='Bit pattern for the 4 LEDs (0=all off, 15=all on)'),
    Key('shutterIndexer',
        Bool('Off', 'On'),
        help='Is the shutter controller available (on and communicating)?'),

    # Telemetry
    Key('tempNames',
        String() * 20,
        help='Location name of each temperature sensor'),
    Key('temps',
        Float(units='K', invalid='NaN') * 20,
        help='temperatures inside apogee'),
    Key('tempInterval',
        Float(units='sec', invalid='NaN'),
        help='Reporting interval of the temperatures and alarms; 0.0 '
             'turns automatic reporting off'),
    Key('tempAlarms',
        Bool('0', '1') * 20,
        help='Alarm status for each temperature sensor; 0=ok, 1=alarm'),
    Key('tempThresholds',
        Float(units='K', invalid='NaN') * 20,
        help='Threshold for each sensor (degreesK)'),
    Key('tempMin',
        Float(units='K', invalid='NaN') * 20,
        help='Expected minimum values (degreesK)'),
    Key('tempMax',
        Float(units='K', invalid='NaN') * 20,
        help='Expected maximum values (degreesK)'),
    Key('vacuum',
        Float(units='Torr', invalid='NaN'),
        help='Current vacumm read by the primary gauge; '
             'NaN if not available (Torr)'),
    Key('vacuumAlt',
        Float(units='Torr', invalid='NaN'),
        help='Current vacumm read by the secondary gauge; '
             'NaN if not available (Torr)'),
    Key('vacuumInterval',
        Float(units='sec', invalid='NaN'),
        help='Reporting interval of the vacuum and alarms; '
             '0.0 turns automatic reporting off'),
    Key('vacuumAlarm',
        Bool('0', '1'),
        help='Vacuum Alarm state; 0=ok, 1=alarm'),
    Key('vacuumThreshold',
        Float(units='Torr', invalid='NaN'),
        help='Vacuum Threshold'),
    Key('vacuumLimits',
        Float(units='Torr', invalid='NaN') * 2,
        help='Expected Low, High Vacuum'),
    Key('ln2Level',
        Float(units='%', invalid='NaN'),
        help='Current level of LN2 in instrument; NaN if not available'),
    Key('ln2Interval',
        Float(units='sec', invalid='NaN'),
        help='Reporting interval of the LN2 level and alarms; '
             '0.0 turns automatic reporting off'),
    Key('ln2Alarm',
        Bool('0', '1'),
        help='LN2 Level Alarm state; 0=ok, 1=alarm'),
    Key('ln2Threshold',
        Float(units='%', invalid='NaN'),
        help='LN2 Level below which an Alarm is triggered'),
    Key('ln2Limits',
        Float(units='%', invalid='NaN') * 2,
        help='Expected Low, High LN2 level'),
)
