#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# @Author: José Sánchez-Gallego (gallegoj@uw.edu)
# @Date: 2019-12-28
# @Filename: mcp.py
# @License: BSD 3-clause (http://www.opensource.org/licenses/BSD-3-Clause)

# type: ignore


KeysDictionary(
    'mcp', (5, 2),

    # Command-related keywords
    Key('badAxis', String(), doCache=False, help='Unknown telescope axis'),
    Key('badCharacter', Int(), doCache=False, help='ASCII code of invalid character'),
    Key('badCommand', String(), doCache=False, help='Invalid command string'),
    Key('badSpectrograph', Int(), doCache=False, help='Invalid spectrograph ID'),
    Key('badUserId', help='Your suggested userID was invalid'),
    Key('command', String(), doCache=False, help='Command string'),
    Key('commandIn', String(), doCache=False, help='Debugging information; will go away'),
    Key('commandTooLong', Int(help='length of command'), doCache=False,
        help='Command was too long to parse'),
    Key('controlLamps', help='Indicates that a lamps control command finished'),
    Key('lampsCommanded', Bool('false', 'true'), doCache=False, help=''),
    Key('text', String(), doCache=False),
    Key('userId', String(), help='Name reported by user'),
    Key('yourUserNum', Int(), help='Your user ID number'),

    # Iack and semaphore
    Key('haveSemaphore', Bool('false', 'true'), help='Do you have the semaphore?'),
    Key('needIack', Bool('false', 'true'),
        help='If true, you must send an iack before commanding the mcp'),
    Key('needSemaphore',
        help="Command rejected because you don't have the semaphore"),
    Key('semaphoreOwner', String() * (0, 1),
        help='Name of user (self-reported) who owns the semaphore'),

    # Flat field screens
    Key('ffsCloseFailed', Bool('false', 'true'), doCache=False),
    Key('ffsCommanded', Bool('false', 'true'), doCache=False),
    Key('ffsCommandedOpen', Bool('false', 'true'), help='Flat field petals commanded close/open'),
    Key('ffsMoved', Bool('false', 'true'), doCache=False),
    Key('ffsOpenFailed', Bool('false', 'true'), doCache=False),
    Key('ffsSelected', Enum('00', '01', '10', '11', labelHelp=('None', 'Half1', 'Half2', 'All')),
        help='Flat field petals enabled'),
    Key('ffsStatus',
        Enum('00', '01', '10', '11', labelHelp=('?', 'Closed', 'Open', 'Invalid')) * 8,
        help='State of flat field petals 1-8'),

    # Lamps
    Key('ffLamp', Bool('0', '1') * 4, help='Detected state of flat field lamps'),
    Key('ffLampCommandedOn', Bool('false', 'true'), help='Commanded state of flat-field lamps'),
    Key('hgCdLamp', Bool('0', '1') * 4, help='Detected state of mercury/cadmium lamps'),
    Key('hgCdLampCommandedOn', Bool('false', 'true'),
        help='Commanded state of mercury/cadmium lamps'),
    Key('neLamp', Bool('0', '1') * 4, help='Detected state of neon lamps'),
    Key('neLampCommandedOn', Bool('false', 'true'), help='Commanded state of neon lamps'),
    Key('uvLampCommandedOn', Bool('false', 'true'), help='Commanded state of UV lamps'),
    Key('whtLampCommandedOn', Bool('false', 'true'), help='Commanded state of white lamps'),

    # Counterweights
    Key('cwAbort', Int(), doCache=False,
        help='Abort on counterweight 1,2,3 or 4 (only one abort is reported at a time)'),
    Key('cwPositions', Int() * 4,
        help='Counterweight positions'),
    Key('cwStatus', Enum('..', 'L.', '.U', 'LU',
                         labelHelp=('InRange', 'AtLowerLimit', 'AtUpperLimit', 'Invalid')) * 4,
        help='Counterweight status'),

    # Other PLC signals
    Key('altWindscreenTouched', Enum('00', '01', '10', '11',
                                     labelHelp=('None', 'Down', 'Up', 'Both'))),
    Key('azWindscreenTouched', Enum('00', '01', '10', '11',
                                    labelHelp=('None', 'CW', 'CCW', 'Both'))),
    Key('instrumentNum', Int(invalid='-1'),
        help='Instrument ID; 0=no instrument; 19=engineering camera; -1=switches '
             'inconsistent or could not get semaphore'),
    Key('instrumentNumConsistent', Bool('false', 'true'),
        help='Do the three instrument ID switches agree? '
             'If not, instrumentNumValues is also output.'),
    Key('instrumentNumValues', Int() * 3,
        help='Reading from each instrument ID switch'),
    Key('saddleIsMounted', Bool('false', 'true'),
        help='Imager saddle is mounted'),
    Key('sp1Slithead',
        Enum('00', '01', '10', '11', name='status', labelHelp=('?', 'Open', 'Closed', 'Invalid')),
        Bool('0', '1', name='extended', help='Latch extended'),
        Bool('0', '1', name='inplace', help='Slithead in place')),
    Key('sp2Slithead',
        Enum('00', '01', '10', '11', name='status', labelHelp=('?', 'Open', 'Closed', 'Invalid')),
        Bool('0', '1', name='extended', help='Latch extended'),
        Bool('0', '1', name='inplace', help='Slithead in place')),
    Key('apogeeGang',
        Enum('0', '1', '2', '4', '12', '20', '36',
             labelHelp=('Unknown', 'Disconnected', 'At Cart', 'Podium?',
                        'Podium: dense', 'Podium: sparse', 'Podium: 1m'))),

    # Obsolete
    Key('tbarCommanded', Bool('false', 'true'), doCache=False, help='Imager TBar move requested'),

    # Axis controller, in order Az, Alt, Rot
    Key('azMaxAccLimit', Float(units='deg/s^2'), help='Maximum acceleration allowed'),
    Key('azMaxAccRequested', Float(units='deg/s^2'),
        doCache=False, help='Maximum acceleration requested'),
    Key('azMaxVelLimit', Float(units='deg/s'), help='Maximum velocity allowed'),
    Key('azMaxVelRequested', Float(units='deg/s'), help='Maximum velocity'),
    Key('azMsOn', Bool('false', 'true'), help='Fiducial corrections enabled requested'),
    Key('azPidCoeffs',
        Int(name='termProp', help='Proportional term'),
        Int(name='termInt', help='Integral term'),
        Int(name='termDeriv', help='Derivitive term'),
        Int(name='accel', help='Accel_FF'),
        Int(name='vel', help='Vel_FF'),
        Int(name='limitI', help='I_limit'),
        Int(name='offset', help='Offset'),
        Int(name='limitDac', help='DAC_limit'),
        Int(name='shift', help='Shift'),
        Int(name='friction', help='Friction_FF'),
        help='Servo loop tuning parameters; for details see the MEI manual'),

    Key('altMaxAccLimit', Float(units='deg/s^2'), help='Maximum acceleration allowed'),
    Key('altMaxAccRequested', Float(units='deg/s^2'),
        doCache=False, help='Maximum acceleration requested'),
    Key('altMaxVelLimit', Float(units='deg/s'), help='Maximum velocity allowed'),
    Key('altMaxVelRequested', Float(units='deg/s'), help='Maximum velocity requested'),
    Key('altMsOn', Bool('false', 'true'), help='Fiducial corrections enabled'),
    Key('altPidCoeffs',
        Int(name='termProp', help='P: proportional term'),
        Int(name='termInt', help='I: integral term'),
        Int(name='termDeriv', help='D: derivitive term'),
        Int(name='accel', help='Accel_FF'),
        Int(name='vel', help='Vel_FF'),
        Int(name='limitI', help='I_limit'),
        Int(name='offset', help='Offset'),
        Int(name='limitDac', help='DAC_limit'),
        Int(name='shift', help='Shift'),
        Int(name='friction', help='Friction_FF'),
        help='Servo loop tuning parameters; for details see the MEI manual'),

    Key('rotBadFiducialDelta', Int(), help='Unknown fiducial: invalid delta between tape marks'),
    Key('rotMaxAccLimit', Float(units='deg/s^2'), help='Maximum acceleration allowed'),
    Key('rotMaxAccRequested', Float(units='deg/s^2'),
        doCache=False, help='Maximum acceleration requested'),
    Key('rotMaxVelLimit', Float(units='deg/s'), help='Maximum velocity allowed'),
    Key('rotMaxVelRequested', Float(units='deg/s'), help='Maximum velocity requested'),
    Key('rotMsOn', Bool('false', 'true'), help='Fiducial corrections enabled'),
    Key('rotPidCoeffs',
        Int(name='termProp', help='Proportional term'),
        Int(name='termInt', help='Integral term'),
        Int(name='termDer', help='Derivitive term'),
        Int(name='accel', help='Accel FF'),
        Int(name='vel', help='Vel FF'),
        Int(name='limitCur', help='Current limit'),
        Int(name='offset', help='Offset'),
        Int(name='limitDac', help='DAC limit'),
        Int(name='shift', help='Shift'),
        Int(name='friction', help='Friction FF'),
        help='Servo loop tuning parameters; for details see the MEI manual'),

    # Axis encoders and fiducials
    Key('minEncoderMismatch', Int() * 3,
        help='Limit below which readings from paired '
             'encoders are considered equal (az, alt, rot)'),
    Key('msOnMaxCorrection', Int() * 3,
        help='Maximum fiducial error which will be corrected (az, alt, rot)'),

    Key('azFiducialCrossing',
        Int(name='index', help='fiducial index'),
        Float(name='deg', units='deg', help='fiducial position'),
        Int(name='errorExpected', units='ticks', help='error in expected position', invalid=99999),
        Int(name='errorReported', units='ticks', help='error in reported position')),
    Key('altFiducialCrossing',
        Int(name='index', help='fiducial index'),
        Float(name='deg', units='deg', help='fiducial position'),
        Int(name='errorExpected', units='ticks', help='error since last crossing', invalid=99999),
        Int(name='errorReported', units='ticks', help='error in reported position')),
    Key('rotFiducialCrossing',
        Int(name='index', help='fiducial index'),
        Float(name='deg', units='deg', help='fiducial position'),
        Int(name='errorExpected', units='ticks', help='error since last crossing', invalid=99999),
        Int(name='errorReported', units='ticks', help='error in reported position')),
    Key('azBadFiducial',
        Int(name='index', help='fiducial index'),
        Float(name='deg', units='deg', help='fiducial position'),
        help='The fiducial appears to be an impossible one'),
    Key('altBadFiducial',
        Int(name='index', help='fiducial index'),
        Float(name='deg', units='deg', help='fiducial position'),
        help='The fiducial appears to be an impossible one'),
    Key('rotBadFiducial',
        Int(name='index', help='fiducial index'),
        Float(name='deg', units='deg', help='fiducial position'),
        help='The fiducial appears to be an impossible one'),

    # Versions
    Key('goodFiducialVersions', Bool('false', 'true'),
        help='The fiducial table version numbers are consistent'),
    Key('azFiducialVersion', String(), help='Version of fiducial table'),
    Key('altFiducialVersion', String(), help='Version of fiducial table'),
    Key('rotFiducialVersion', String(), help='Version of fiducial table'),
    Key('mcpVersion', String(), help='Version of MCP code'),
    Key('plcVersion', Int(), help='PLC version, if consistent (see also pclVersions)'),
    Key('plcVersions',
        Int(name='number'),
        String(name='string'),
        help='PLC versions from the Allen-Bradley and data_collection.h'),

    # Actor housekeeping
    Key('aliveAt', UInt(units='s', help='Elapsed TAI(?) since unix epoch'),
        help='MCP 1/60 Hz keep-alive message'),

    # Allen-Bradley words
    Key('ab_status', Int() * 4, help='Allen Bradley status, azstate, altstate, rotstate'),

    # Information from the imager, passed via the mcp
    Key('imCamCheck', String() * (0,), help='Imager errors reported by iop'),

    # The machine-generated bitfield definitions are inserted here:
    Key('ab_B3_L0',
        Bits('up_inhibit_latch',
             'dn_inhibit_latch_1',
             'dn_inhibit_latch_2',
             'dn_inhibit_latch_3',
             'dn_inhibit_latch_4',
             'e_stop_permit',
             'mcp_cont_slit_dr',
             'plc_cont_slit_dr',
             'mcp_cont_slit_hd',
             'plc_cont_slit_hd',
             'mcp_cont_t_bar_latch',
             'plc_cont_t_bar_latch',
             'flip_flop_0',
             'flip_flop_1',
             'flip_flop_2',
             'flip_flop_3',
             'flip_flop_4',
             'flip_flop_5',
             'led_flash',
             'e_stop_flash_reset',
             'ff_screens_closed',
             'ilcb_led_on',
             'lift_speed_man_ovrid',
             'ne_lamp_on_request',
             'hgcd_lamp_on_request',
             'az_mtr_iv_good',
             'alt_mtr_iv_good',
             'rot_mtr_iv_good',
             ),
        help=''),
    Key('ab_B3_L1',
        Bits('disc_cable',
             'no_inst_in_place',
             'cartridge_1',
             'cartridge_2',
             'cartridge_3',
             'cartridge_4',
             'cartridge_5',
             'cartridge_6',
             'cartridge_7',
             'cartridge_8',
             'cartridge_9',
             'eng_cam_in_place',
             'undefined_3',
             'undefined_1',
             'undefined_2',
             'img_cam_in_place',
             ),
        help=''),
    Key('ab_B3_L2',
        Bits('mcp_cont_slit_hd_os1',
             'mcp_cont_slit_hd_os2',
             'mcp_cont_slit_hd_os3',
             'mcp_cont_slit_hd_os4',
             'plc_cont_slit_hd_unl',
             'plc_cont_slit_hd_lth',
             'cor_in_place',
             'cor_not_in_place',
             'cartg_in_place',
             'pri_latch_opn',
             'pri_latch_cls',
             'sec_latch_opn',
             'sec_latch_cls',
             'sad_latch_opn',
             'sad_latch_cls',
             'lift_empty',
             'plc_cont_slit_dr_osr',
             'plc_cont_slit_hd_osr',
             'mcp_cont_t_bar_osr',
             'plc_cont_t_bar_osr',
             'plc_t_bar_xport',
             'plc_t_bar_tel',
             'mcp_cont_slit_dr_os1',
             'mcp_cont_slit_dr_os2',
             'mcp_cont_slit_dr_os3',
             'mcp_cont_slit_dr_os4',
             'plc_cont_slit_dr_opn',
             'plc_cont_slit_dr_cls',
             'sad_in_place',
             'sad_not_in_place',
             ),
        help=''),
    Key('ab_B3_L3',
        Bits('img_cam_up_in_place',
             'cartg_up_in_place',
             'cor_up_in_place',
             'eng_cam_up_in_place',
             'empty_plate_on_lift',
             'flex_io_fault',
             'auto_mode_enable',
             'cor_on_lift',
             'cam_on_lift_wo_j_hok',
             'cam_on_lift_w_j_hok',
             'cartg_on_lift',
             'cartg_on_lift_comp',
             'eng_cam_on_lift',
             'eng_cam_on_lift_comp',
             'lift_force_up_enable',
             'lift_force_dn_enable',
             'lift_up_enable',
             'lift_down_enable',
             'speed_1',
             'speed_2',
             'speed_3',
             'speed_4',
             ),
        help=''),
    Key('ab_B3_L4',
        Bits('lh_grt_23d1',
             'lh_lim_22d3_23d1',
             'lh_lim_18d0_22d3',
             'lh_les_18d5_2',
             'lh_les_0d75',
             'lf_les_500',
             'lh_lim_0d75_2d0',
             'lh_lim_2d0_20d0',
             'lf_les_350',
             'lf_les_1400',
             'lf_les_350_2',
             'lf_les_450',
             'lf_les_200',
             'lf_les_150',
             'lf_les_350_3',
             'lh_lim_20d0_21d89',
             'altitude_at_inst_chg',
             'lh_les_18d5',
             'lh_lim_18d0_21d89',
             'lh_lim_18d0_22d8',
             'lh_lim_18d0_23d0',
             'lh_lim_2d2_18d5',
             'lh_lim_18d0_21d74',
             'lh_lim_18d0_22d5',
             'lh_lim_18d0_22d75',
             'lh_lim_2d5_18d5',
             'lh_lim_18d0_20d99',
             'lh_lim_18d0_22d0',
             'lh_lim_18d0_22d2',
             'lh_les_2d0',
             'lh_lim_1d95_18d0',
             'lh_grt_17d5',
             ),
        help=''),
    Key('ab_B3_L5',
        Bits('lf_les_800',
             'lh_les_0d75_2',
             'lf_grt_neg_125',
             'lh_lim_0d75_3d0',
             'lh_lim_2d0_20d0_2',
             'lf_grt_150',
             'lf_grt_1100',
             'lf_grt_220',
             'lf_grt_310',
             'lf_grt_0d0',
             'lf_grt_0d0_2',
             'lf_grt_125',
             'lh_lim_20d0_21d89_2',
             'lf_grt_150_2',
             'lf_grt_220_2',
             'lf_grt_310_2',
             'lf_les_1650',
             'lf_les_350_4',
             'lf_les_500_2',
             'lf_les_200_2',
             'lf_les_150_2',
             'lf_les_350_5',
             'lh_lim_21d89_22d3',
             'lf_les_1700',
             'lf_les_400',
             'lf_les_500_3',
             'lf_les_200_3',
             'lf_les_150_3',
             'lf_les_400_2',
             'lh_lim_22d3_23d1_2',
             'lf_les_1100',
             'lh_lim_23d1_23d3',
             ),
        help=''),
    Key('ab_B3_L6',
        Bits('lf_grt_950_1',
             'lh_lim_23d04_23d24',
             'lf_grt_750',
             'lh_les_6d0',
             'lh_les_6d0_1',
             'lh_les_6d0_2',
             'lh_les_6d0_3',
             'lh_les_6d0_4',
             'lh_les_6d0_5',
             'az_bump_cw_delay',
             'az_bump_ccw_delay',
             'alt_bump_up_delay',
             'alt_bump_dn_delay',
             'im_ff_wht_on_req',
             'im_ff_uv_on_req',
             'spare_b3_13_15',
             'lf_grt_0d0_3',
             'lf_grt_0d0_4',
             'lf_grt_125_2',
             'lh_lim_21d89_22d3_2',
             'lf_grt_150_3',
             'lf_grt_220_3',
             'lf_grt_310_3',
             'lf_grt_0d0_5',
             'lf_grt_0d0_6',
             'lf_grt_125_3',
             'lh_lim_22d3_24d0',
             'lh_lim_21d8_22d15',
             'lf_grt_1400',
             'lh_lim_22d85_23d05',
             'lf_grt_950',
             'lh_lim_22d89_23d09',
             ),
        help=''),
    Key('ab_B3_L7',
        Bits('spare_b3_15_0',
             'spare_b3_15_1',
             'spare_b3_15_2',
             'spare_b3_15_3',
             'spare_b3_15_4',
             'spare_b3_15_5',
             'spare_b3_15_6',
             'marvels_gc_both_sw',
             'apogee_gc_at_stow',
             'apogee_gc_unplugged',
             'marvels_gc_unplugged',
             'apogee_gc_at_dense',
             'apogee_gc_at_cart',
             'marvels_gc_at_stow',
             'marvels_gc_at_cart',
             'apogee_gc_at_sparse',
             'cartridge_10',
             'cartridge_11',
             'cartridge_12',
             'cartridge_13',
             'cartridge_14',
             'cartridge_15',
             'cartridge_16',
             'cartridge_17',
             'cartridge_18',
             'spare_b3_14_9',
             'spare_b3_14_10',
             'spare_b3_14_11',
             'spare_b3_14_12',
             'spare_b3_14_13',
             'spare_b3_14_14',
             'spare_b3_14_15',
             ),
        help=''),
    Key('ab_B3_L8',
        Bits('spare_b3_17_0',
             'spare_b3_17_1',
             'spare_b3_17_2',
             'spare_b3_17_3',
             'spare_b3_17_4',
             'spare_b3_17_5',
             'spare_b3_17_6',
             'spare_b3_17_7',
             'spare_b3_17_8',
             'spare_b3_17_9',
             'spare_b3_17_10',
             'spare_b3_17_11',
             'spare_b3_17_12',
             'spare_b3_17_13',
             'spare_b3_17_14',
             'spare_b3_17_15',
             'spare_b3_16_0',
             'spare_b3_16_1',
             'spare_b3_16_2',
             'spare_b3_16_3',
             'spare_b3_16_4',
             'spare_b3_16_5',
             'spare_b3_16_6',
             'spare_b3_16_7',
             'spare_b3_16_8',
             'spare_b3_16_9',
             'spare_b3_16_10',
             'spare_b3_16_11',
             'spare_b3_16_12',
             'spare_b3_16_13',
             'spare_b3_16_14',
             'spare_b3_16_15',
             ),
        help=''),
    Key('ab_B3_L9',
        Bits('spare_b3_19_0',
             'spare_b3_19_1',
             'spare_b3_19_2',
             'spare_b3_19_3',
             'spare_b3_19_4',
             'spare_b3_19_5',
             'spare_b3_19_6',
             'spare_b3_19_7',
             'spare_b3_19_8',
             'spare_b3_19_9',
             'spare_b3_19_10',
             'spare_b3_19_11',
             'spare_b3_19_12',
             'spare_b3_19_13',
             'spare_b3_19_14',
             'spare_b3_19_15',
             'spare_b3_18_0',
             'spare_b3_18_1',
             'spare_b3_18_2',
             'spare_b3_18_3',
             'spare_b3_18_4',
             'spare_b3_18_5',
             'spare_b3_18_6',
             'spare_b3_18_7',
             'spare_b3_18_8',
             'spare_b3_18_9',
             'spare_b3_18_10',
             'spare_b3_18_11',
             'spare_b3_18_12',
             'spare_b3_18_13',
             'spare_b3_18_14',
             'spare_b3_18_15',
             ),
        help=''),
    Key('ab_B10_L0',
        Bits('mcp_clamp_disen_cmd',
             'mcp_15deg_stop_ext_c',
             'mcp_15deg_stop_ret_c',
             'mcp_umbilical_up_dn',
             'mcp_umbilical_on_off',
             'mcp_slit_dr1_opn_cmd',
             'mcp_slit_dr1_cls_cmd',
             'mcp_slit_latch1_cmd',
             'mcp_slit_dr2_opn_cmd',
             'mcp_slit_dr2_cls_cmd',
             'mcp_slit_latch2_cmd',
             'mcp_ff_scrn_opn_cmd',
             'mcp_ff_lamp_on_cmd',
             'mcp_ne_lamp_on_cmd',
             'mcp_hgcd_lamp_on_cmd',
             'mcp_ff_screen_enable',
             'mcp_lift_high_psi',
             'mcp_lift_up_4',
             'mcp_lift_up_3',
             'mcp_lift_up_2',
             'mcp_lift_up_1',
             'mcp_lift_dn_1',
             'mcp_lift_dn_2',
             'mcp_lift_dn_3',
             'mcp_lift_dn_4',
             'mcp_pump_on',
             'mcp_solenoid_engage',
             'mcp_az_brk_dis_cmd',
             'mcp_az_brk_en_cmd',
             'mcp_alt_brk_dis_cmd',
             'mcp_alt_brk_en_cmd',
             'mcp_clamp_engage_cmd',
             ),
        help=''),
    Key('ab_B10_L1',
        Bits('velocity_trp_rst_in',
             'mcp_t_bar_xport',
             'mcp_t_bar_tel',
             'mcp_purge_cell_on',
             'mcp_pri_latch_cls_cm',
             'mcp_pri_latch_opn_cm',
             'mcp_sec_latch_cls_cm',
             'mcp_sec_latch_opn_cm',
             'mcp_sad_latch_cls_cm',
             'mcp_sad_latch_opn_cm',
             'mcp_inst_chg_prompt',
             'mcp_inst_chg_alert',
             'mcp_ff_scrn2_opn_cmd',
             'mcp_ff_screen2_enabl',
             'mcp_umbilical_fast',
             'mcp_im_ff_wht_req',
             'mcp_im_ff_uv_req',
             ),
        help=''),
    Key('ab_I1_L0',
        Bits('dog_house_cw_pad',
             'dog_house_ccw_pad',
             'dog_house_door_opn',
             'dog_house_door_cls',
             'ops_cart_in_house',
             'optical_bench_opn',
             'optical_bench_cls',
             'rack_0_grp_1_bit_7',
             'rack_0_grp_1_bit_8',
             'rack_0_grp_1_bit_9',
             'rack_0_grp_1_bit_10',
             'apogee_gc_at_cart_sw',
             'apogee_gc_at_stow_sw',
             'marvel_gc_at_cart_sw',
             'marvel_gc_at_stow_sw',
             'low_lvl_light_req',
             'inst_lift_pump_on',
             'inst_lift_sw1',
             'inst_lift_sw2',
             'inst_lift_sw3',
             'inst_lift_sw4',
             'inst_lift_dn',
             'inst_lift_man',
             'inst_lift_high_force',
             'inst_lift_low_force',
             'fiber_cart_pos1',
             'fiber_cart_pos2',
             'ops_cart_in_pos',
             'rack_0_grp_0_bit_12',
             'az_bump_cw',
             'az_bump_ccw',
             'rack_0_grp_0_bit_15',
             ),
        help=''),
    Key('ab_I1_L1', Bits('spare_i1_l1', ), help=''),
    Key('ab_I1_L2', Bits('spare_i1_l2', ), help=''),
    Key('ab_I1_L3', Bits('spare_i1_l3', ), help=''),
    Key('ab_I1_L4',
        Bits('slit_latch_unlth_cmd',
             'slit_latch_lth_cmd',
             'tbar_latch_xport_cmd',
             'tbar_latch_tel_cmd',
             'rack_1_grp_1_bit_4',
             'rack_1_grp_1_bit_5',
             'rack_1_grp_1_bit_6',
             'rack_1_grp_1_bit_7',
             'rack_1_grp_1_bit_8',
             'rack_1_grp_1_bit_9',
             'rack_1_grp_1_bit_10',
             'rack_1_grp_1_bit_11',
             'rack_1_grp_1_bit_12',
             'rack_1_grp_1_bit_13',
             'rack_1_grp_1_bit_14',
             'rack_1_grp_1_bit_15',
             'rot_inst_chg_a',
             'rot_inst_chg_b',
             'rot_neg_190_cw',
             'rot_pos_370_ccw',
             'ilcb_pres_good',
             'inst_man_valve_cls',
             'sec_man_valve_cls',
             'sad_man_valve_cls',
             'iclb_leds_on_cmd',
             'off_mode_sw',
             'auto_mode_sw',
             'man_mode_switch',
             'inst_chg_install_sw',
             'inst_chg_remove_sw',
             'close_slit_doors',
             'open_slit_doors',
             ),
        help=''),
    Key('ab_I1_L5', Bits('spare_i1_l5', ), help=''),
    Key('ab_I1_L6', Bits('spare_i1_l6', ), help=''),
    Key('ab_I1_L7', Bits('spare_i1_l7', ), help=''),
    Key('ab_I1_L8',
        Bits('pri_latch1_opn',
             'pri_latch1_cls',
             'pri_latch2_opn',
             'pri_latch2_cls',
             'pri_latch3_opn',
             'pri_latch3_cls',
             'sec_latch1_opn',
             'sec_latch1_cls',
             'sec_latch2_opn',
             'sec_latch2_cls',
             'sec_latch3_opn',
             'sec_latch3_cls',
             'safety_latch1_opn',
             'safety_latch1_cls',
             'safety_latch2_opn',
             'safety_latch2_cls',
             'inst_id1_1',
             'inst_id1_2',
             'inst_id1_3',
             'inst_id1_4',
             'inst_id2_1',
             'inst_id2_2',
             'inst_id2_3',
             'inst_id2_4',
             'inst_id3_1',
             'inst_id3_2',
             'inst_id3_3',
             'inst_id3_4',
             'spec_lens1',
             'spec_lens2',
             'spec_autofill_on',
             'rack_2_grp_0_bit_15',
             ),
        help=''),
    Key('ab_I1_L9',
        Bits('sad_latch1_opn',
             'sad_latch1_cls',
             'sad_latch2_opn',
             'sad_latch2_cls',
             'sad_mount1',
             'sad_mount2',
             'slit_head_door1_opn',
             'slit_head_door1_cls',
             'slit_head_latch1_ext',
             'slit_head_1_in_place',
             'slit_head_door2_opn',
             'slit_head_door2_cls',
             'slit_head_latch2_ext',
             'slit_head_2_in_place',
             'rack_2_grp_2_bit_14',
             'rack_2_grp_2_bit_15',
             ),
        help=''),
    Key('ab_I1_L10',
        Bits('purge_air_pressur_sw',
             'alt_bump_up',
             'alt_bump_dn',
             'sec_mir_force_limits',
             'rack_2_grp_4_bit_4',
             'rack_2_grp_4_bit_5',
             'rack_2_grp_4_bit_6',
             'rack_2_grp_4_bit_7',
             'rack_2_grp_4_bit_8',
             'rack_2_grp_4_bit_9',
             'rack_2_grp_4_bit_10',
             'rack_2_grp_4_bit_11',
             'rack_2_grp_4_bit_12',
             'rack_2_grp_4_bit_13',
             'rack_2_grp_4_bit_14',
             'rack_2_grp_4_bit_15',
             ),
        help=''),
    Key('ab_I1_L11', Bits('spare_i1_l11', ), help=''),
    Key('ab_I1_L12',
        Bits('rack_3_grp_1_bit_0',
             'inst_lift_auto',
             'man_lift_up_1',
             'man_lift_up_2',
             'man_lift_up_3',
             'man_lift_up_4',
             'man_lift_dn_1',
             'man_lift_dn_2',
             'man_lift_dn_3',
             'man_lift_dn_4',
             'rack_3_grp_1_bit_10',
             'rack_3_grp_1_bit_11',
             'rack_3_grp_1_bit_12',
             'rack_3_grp_1_bit_13',
             'rack_3_grp_1_bit_14',
             'rack_3_grp_1_bit_15',
             'spare_i1_l12',
             ),
        help=''),
    Key('ab_I1_L13',
        Bits('ff_1_stat',
             'ff_2_stat',
             'ff_3_stat',
             'ff_4_stat',
             'ne_1_stat',
             'ne_2_stat',
             'ne_3_stat',
             'ne_4_stat',
             'hgcd_1_stat',
             'hgcd_2_stat',
             'hgcd_3_stat',
             'hgcd_4_stat',
             'rack_3_grp_3_bit_12',
             'rack_3_grp_3_bit_13',
             'rack_3_grp_3_bit_14',
             'rack_3_grp_3_bit_15',
             'leaf_1_open_stat',
             'leaf_1_closed_stat',
             'leaf_2_open_stat',
             'leaf_2_closed_stat',
             'leaf_3_open_stat',
             'leaf_3_closed_stat',
             'leaf_4_open_stat',
             'leaf_4_closed_stat',
             'leaf_5_open_stat',
             'leaf_5_closed_stat',
             'leaf_6_open_stat',
             'leaf_6_closed_stat',
             'leaf_7_open_stat',
             'leaf_7_closed_stat',
             'leaf_8_open_stat',
             'leaf_8_closed_stat',
             ),
        help=''),
    Key('ab_I1_L14',
        Bits('man_ff_scrn_opn_cmd',
             'man_ff_scrn_en_cmd',
             'man_ff_lamp_on_cmd',
             'man_ne_lamp_on_cmd',
             'man_hgcd_lamp_on_cmd',
             'ff_man_cont_enable',
             'man_im_ff_wht_req',
             'man_im_ff_uv_req',
             'rack_3_grp_4_bit_8',
             'rack_3_grp_4_bit_9',
             'rack_3_grp_4_bit_10',
             'rack_3_grp_4_bit_11',
             'rack_3_grp_4_bit_12',
             'rack_3_grp_4_bit_13',
             'rack_3_grp_4_bit_14',
             'rack_3_grp_4_bit_15',
             ),
        help=''),
    Key('ab_I1_L15', Bits('spare_i1_l15', ), help=''),
    Key('ab_I2_L0', Bits('wind_az1_fault', 'wind_az2_fault', 'wind_az3_fault',
                         'wind_alt1_fault', 'wind_az_perm', 'wind_alt_perm', 'spare'), help=''),
    Key('ab_I6_L0',
        Bits('alt_mtr_up_perm_in',
             'alt_mtr_dn_perm_in',
             'alt_mtr1_perm_in',
             'alt_mtr2_perm_in',
             'wind_alt_mtr_perm_in',
             'alt_plc_perm_in',
             'wind_alt_plc_perm_in',
             'az_stow_3a',
             'az_mtr_cw_perm_in',
             'az_mtr_ccw_perm_in',
             'az_mtr1_perm_in',
             'az_mtr2_perm_in',
             'wind_az_mtr_perm_in',
             'az_plc_perm_in',
             'wind_az_plc_perm_in',
             'az_stow_3b',
             'tcc_stop',
             'cr_stop',
             'spare_s1_c2',
             'fiber_signal_loss',
             'n_wind_stop',
             'n_fork_stop',
             'n_rail_stop',
             's_rail_stop',
             'w_rail_stop',
             'n_lower_stop',
             's_lower_stop',
             'e_lower_stop',
             'w_lower_stop',
             's_wind_stop',
             'nw_fork_stop',
             'mcp_watchdog_timer',
             ),
        help=''),
    Key('ab_I7_L0',
        Bits('alt_grt_83_limit_1',
             'bldg_clear_alt',
             'az_stow_2a',
             'az_stow_2b',
             'deg_15_stop_ext',
             'alt_grt_18d6_limit_2',
             'alt_slip',
             'alt_velocity_limit',
             'az_dir_cw',
             'az_dir_ccw',
             'az_neg_201a_cw',
             'az_pos_445a_ccw',
             'az_neg_201b_cw',
             'az_pos_445b_ccw',
             'spare_s8_c6',
             'spare_s8_c7',
             'rot_mtr_cw_perm_in',
             'rot_mtr_ccw_perm_in',
             'rot_mtr_perm_in',
             'spare_s5_c3',
             'bldg_perm_in',
             'rot_plc_perm_in',
             'hatch_cls',
             'alt_les_2d5_limit',
             'alt_grt_0d3_limit',
             'alt_locking_pin_out',
             'alt_les_90d5_limit',
             'bldg_on_alt',
             'az_109_131_limit_1',
             'alt_grt_18d6_limit_1',
             'az_stow_1a',
             'az_stow_1b',
             ),
        help=''),
    Key('ab_I8_L0',
        Bits('az_stow_cntr_sw',
             'az_110_130_limit',
             'az_neg_196_cw',
             'az_pos_440_ccw',
             'az_mtr1_rdy',
             'az_mtr2_rdy',
             'alt_mtr1_rdy',
             'alt_mtr2_rdy',
             'rot_mtr_rdy',
             'umbilical_strain_sw',
             'e_stop_byp_sw',
             'deg_15_stop_ret',
             'in_8_bit_28_spare',
             'in_8_bit_29_spare',
             'az_near_dimm',
             't_bar_xport_stat',
             'alt_grt_18d6_limit_3',
             'bldg_on_az',
             'az_109_131_limit_2',
             'alt_grt_83_limit_2',
             'bldg_clear_az',
             'spare_s9_c5',
             'az_slip',
             'az_velocity_limit',
             'rot_dir_cw',
             'rot_dir_ccw',
             'rot_neg_200a_cw',
             'rot_pos_380a_ccw',
             'rot_neg_200b_cw',
             'rot_pos_380b_ccw',
             'rot_slip',
             'rot_velocity_limit',
             ),
        help=''),
    Key('ab_I9_L0',
        Bits('s1_c0_bypass_sw',
             's1_c1_bypass_sw',
             's1_c2_bypass_sw',
             's1_c3_bypass_sw',
             's1_c4_bypass_sw',
             's1_c5_bypass_sw',
             's1_c6_bypass_sw',
             's1_c7_bypass_sw',
             's2_c0_bypass_sw',
             's2_c1_bypass_sw',
             's2_c2_bypass_sw',
             's2_c3_bypass_sw',
             's2_c4_bypass_sw',
             's2_c5_bypass_sw',
             's2_c6_bypass_sw',
             's2_c7_mcp_wtchdg_byp',
             't_bar_tel_stat',
             'clamp_en_stat',
             'clamp_dis_stat',
             'az_brake_en_stat',
             'az_brake_dis_stat',
             'alt_brake_en_stat',
             'alt_brake_dis_stat',
             'low_lvl_lighting_req',
             'solenoid_engage_sw',
             'alt_locking_pin_in',
             'in_9_bit_10_spare',
             'in_9_bit_11_spare',
             'in_9_bit_12_spare',
             'in_9_bit_13_spare',
             'in_9_bit_14_spare',
             'in_9_bit_15_spare',
             ),
        help=''),
    Key('ab_I10_L0',
        Bits('lift_force_gt_f_cartridge_mount',
             'lift_height_gt_h_cartridge_mount',
             'in_10_bit_18_spare',
             'in_10_bit_19_spare',
             'in_10_bit_20_spare',
             'in_10_bit_21_spare',
             'in_10_bit_22_spare',
             'in_10_bit_23_spare',
             'in_10_bit_24_spare',
             'in_10_bit_25_spare',
             'in_10_bit_26_spare',
             'in_10_bit_27_spare',
             'in_10_bit_28_spare',
             'in_10_bit_29_spare',
             'in_10_bit_30_spare',
             'in_10_bit_31_spare',
             'alt_position_lt_90_15',
             'alt_position_gt_89_75',
             'alt_position_lt_90_2',
             'alt_position_lt_90_29',
             'alt_position_lt_91_0',
             'alt_position_gt_89_8',
             'alt_position_gt_0_50',
             'alt_position_gt_19_5',
             'alt_position_gt_0_8',
             'alt_position_lt_18_5',
             'alt_position_gt_15_0',
             'alt_position_gt_15_5',
             'alt_position_gt_83_5',
             'alt_pos_lt_0_2',
             'alt_pos_gt_neg_2',
             'umbilical_dn',
             ),
        help=''),
    Key('ab_O1_L0', Bits('spare_o1_l0', ), help=''),
    Key('ab_O1_L1',
        Bits('inst_lift_high_psi',
             'inst_lift_up_4',
             'inst_lift_up_3',
             'inst_lift_up_2',
             'inst_lift_up_1',
             'inst_lift_dn_1',
             'inst_lift_dn_2',
             'inst_lift_dn_3',
             'inst_lift_dn_4',
             'lamp_on_enable',
             'viktory_guardpin',
             'az_stow_center_light',
             'stop_bypass_strobe',
             'az_stow_light',
             'low_lvl_light_1',
             'low_lvl_light_2',
             ),
        help=''),
    Key('ab_O1_L2', Bits('spare_o1_l2', ), help=''),
    Key('ab_O1_L3', Bits('spare_01_l3', ), help=''),
    Key('ab_O1_L4', Bits('spare_o1_l4', ), help=''),
    Key('ab_O1_L5',
        Bits('slit2_unlatched_led',
             'slit2_latched_led',
             'slit_unlatch_prm_led',
             'slit_latch_prm_led',
             'inst_latch1_opn_led',
             'inst_latch1_cls_led',
             'inst_latch2_opn_led',
             'inst_latch2_cls_led',
             'inst_latch3_opn_led',
             'inst_latch3_cls_led',
             'inst_unlatch_perm',
             'inst_latch_perm',
             'sec_latch1_opn_led',
             'sec_latch1_cls_led',
             'sec_latch2_opn_led',
             'sec_latch2_cls_led',
             'cor_on_lift_led',
             'cam_on_lift_led',
             'cartg_on_lift_led',
             'eng_on_lift_led',
             'cor_in_place_led',
             'cam_in_place_led',
             'cartg_in_place_led',
             'eng_in_place_led',
             'sad_in_place_led',
             'jhook_in_place_led',
             'dog_door_open_led',
             'cam_crt_in_house_led',
             'cart_in_place_led',
             'lift_down_led',
             'slit1_unlatched_led',
             'slit1_latched_led',
             ),
        help=''),
    Key('ab_O1_L6',
        Bits('slit_dr1_cls_led',
             'slit_dr1_opn_led',
             'slit_dr2_cls_led',
             'slit_dr2_opn_led',
             'ilcb_pres_led',
             'inst_latch_air_led',
             'sec_latch_air_led',
             'sad_latch_air_led',
             'manual_mode_led',
             'saf_latch1_opn_led',
             'saf_latch1_cls_led',
             'saf_latch2_opn_led',
             'saf_latch2_cls_led',
             'rack_1_grp_5_bit_13',
             'rack_1_grp_5_bit_14',
             'rack_1_grp_5_bit_15',
             'sec_latch3_opn_led',
             'sec_latch3_cls_led',
             'sec_unlatch_perm',
             'sec_latch_perm',
             'sad_latch1_opn_led',
             'sad_latch1_cls_led',
             'sad_latch2_opn_led',
             'sad_latch2_cls_led',
             'sad_unlatch_perm',
             'sad_latch_perm',
             'tbar_xport_led',
             'tbar_tel_led',
             'tbar_xport_perm_led',
             'tbar_tel_perm_led',
             'slit_dr_cls_perm_led',
             'slit_dr_opn_perm_led',
             ),
        help=''),
    Key('ab_O1_L7', Bits('spare_o1_l7', ), help=''),
    Key('ab_O1_L8', Bits('spare_o1_l8', ), help=''),
    Key('ab_O1_L9',
        Bits('slit_dr1_cls_perm',
             'slit_dr1_opn_perm',
             'slit_latch1_ext_perm',
             'slit_dr2_cls_perm',
             'slit_dr2_opn_perm',
             'slit_latch2_ext_perm',
             'rack_2_grp_3_bit_6',
             'rack_2_grp_3_bit_7',
             'rack_2_grp_3_bit_8',
             'rack_2_grp_3_bit_9',
             'rack_2_grp_3_bit_10',
             'rack_2_grp_3_bit_11',
             'rack_2_grp_3_bit_12',
             'rack_2_grp_3_bit_13',
             'rack_2_grp_3_bit_14',
             'rack_2_grp_3_bit_15',
             'spare_o1_l9',
             ),
        help=''),
    Key('ab_O1_L10',
        Bits('purge_valve_permit',
             'rack_2_grp_5_bit_1',
             'rack_2_grp_5_bit_2',
             'rack_2_grp_5_bit_3',
             'rack_2_grp_5_bit_4',
             'rack_2_grp_5_bit_5',
             'rack_2_grp_5_bit_6',
             'rack_2_grp_5_bit_7',
             'rack_2_grp_5_bit_8',
             'rack_2_grp_5_bit_9',
             'rack_2_grp_5_bit_10',
             'rack_2_grp_5_bit_11',
             'rack_2_grp_5_bit_12',
             'rack_2_grp_5_bit_13',
             'rack_2_grp_5_bit_14',
             'audio_warning_2',
             'spare_o1_l10',
             ),
        help=''),
    Key('ab_O1_L11', Bits('spare_o1_l11', ), help=''),
    Key('ab_O1_L12', Bits('spare_o1_l12', ), help=''),
    Key('ab_O1_L13', Bits('spare_o1_l13', ), help=''),
    Key('ab_O1_L14',
        Bits('ff_screen_open_pmt',
             'ff_screen_enable_pmt',
             'ff_lamps_on_pmt',
             'ne_lamps_on_pmt',
             'hgcd_lamps_on_pmt',
             'ff_screen2_open_pmt',
             'ff_screen2_enable_pm',
             'im_ff_wht_on_pmt',
             'im_ff_uv_on_pmt',
             'rack_4_grp_5_bit_9',
             'rack_4_grp_5_bit_10',
             'rack_4_grp_5_bit_11',
             'rack_4_grp_5_bit_12',
             'rack_4_grp_5_bit_13',
             'rack_4_grp_5_bit_14',
             'audio_warning_1',
             'spare_o1_l14',
             ),
        help=''),
    Key('ab_O1_L15', Bits('spare_o1_l15', ), help=''),
    Key('ab_O2_L0', Bits('wind_mtr_cw_perm', 'wind_mtr_ccw_perm', 'wind_mtr_up_perm',
                         'wind_mtr_dn_perm', 'out_2_bit_20_spare', 'out_2_bit_21_spare'), help=''),
    Key('ab_O11_L0',
        Bits('e_ll_led',
             'w_ll_led',
             'n_wind_led',
             'n_fork_led',
             's_wind_led',
             'lift_solenoid_en',
             'deg_15_stop_ext_perm',
             'deg_15_stop_ret_perm',
             'out_11_bit_24_spare',
             'out_11_bit_25_spare',
             'lift_pump_on',
             'out_11_bit_27_spare',
             't_bar_tel_perm',
             't_bar_xport_perm',
             'clamp_dis',
             'clamp_en',
             'alt_mtr_up_perm',
             'alt_mtr_dn_perm',
             'alt_plc_perm',
             'wind_alt_plc_perm',
             'az_mtr_cw_perm',
             'az_mtr_ccw_perm',
             'az_plc_perm',
             'wind_az_plc_perm',
             'rot_mtr_cw_perm',
             'rot_mtr_ccw_perm',
             'rot_plc_perm',
             'n_rail_led',
             's_rail_led',
             'w_rail_led',
             'n_ll_led',
             's_ll_led',
             ),
        help=''),
    Key('ab_O12_L0',
        Bits('out_12_bit_16_spare',
             'out_12_bit_17_spare',
             'out_12_bit_18_spare',
             'out_12_bit_19_spare',
             'out_12_bit_20_spare',
             'out_12_bit_21_spare',
             'out_12_bit_22_spare',
             'out_12_bit_23_spare',
             'out_12_bit_24_spare',
             'out_12_bit_25_spare',
             'out_12_bit_26_spare',
             'out_12_bit_27_spare',
             'out_12_bit_28_spare',
             'out_12_bit_29_spare',
             'out_12_bit_30_spare',
             'out_12_bit_31_spare',
             'az_brake_dis',
             'az_brake_en',
             'alt_brake_dis',
             'alt_brake_en',
             'umbilical_on_off',
             'umbilical_up_dn',
             'nw_fork_led',
             'inst_chg_pos_light',
             'stow_pos_light',
             'velocity_select_bit',
             'velocity_trp_rst_out',
             'lift_enable',
             'umbilical_fast',
             'out_12_bit_13_spare',
             'out_12_bit_14_spare',
             'out_12_bit_15_spare',
             ),
        help=''),
)
